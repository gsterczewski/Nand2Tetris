// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // x => zx => nx
	Mux16(a=x, b=false, sel=zx, out=outX1);
	Not16(in=outX1, out=notOutX1);
    Mux16(a=outX1, b=notOutX1, sel=nx, out=outX2);
    
	// y => zy => ny
	Mux16(a=y, b=false, sel=zy, out=outY1);
	Not16(in=outY1, out=notOutY1);
    Mux16(a=outY1, b=notOutY1, sel=ny, out=outY2);
	
	// x + y
	Add16(a=outX2, b=outY2, out=sumXY);
	
	// x&y
	And16(a=outX2, b=outY2, out=andXY);
	
	// f 
	Mux16(a=andXY, b=sumXY, sel=f, out=outF);
	
	// no
	Not16(in=outF, out=noutF);	
	Mux16(a=outF, b=noutF, sel=no, out=tempOut);
	
	//zr
	Or16Way(in=tempOut, out=isZero);
	Not(in=isZero, out=zr);
	
	//ng
	IsNegative(in=tempOut, out=ng);
	
	// out
	And16(a=tempOut, b=true, out=out);
}